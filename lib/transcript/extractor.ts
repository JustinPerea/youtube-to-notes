/**
 * YouTube Transcript Extraction Utilities
 * 
 * Provides functions to extract transcripts from YouTube videos
 * for efficient text-based processing with Gemini
 */

import { YoutubeTranscript } from 'youtube-transcript';

export interface TranscriptItem {
  text: string;
  duration: number;
  offset: number;
  lang?: string;
}

export interface TranscriptResult {
  success: boolean;
  transcript?: TranscriptItem[];
  fullText?: string;
  error?: string;
  metadata?: {
    videoId: string;
    hasAutoGeneratedCaptions: boolean;
    language: string;
    duration: number;
    wordCount: number;
  };
}

/**
 * Extract YouTube video ID from various URL formats
 */
function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,
    /youtube\.com\/watch\?.*v=([^&\n?#]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  
  return null;
}

/**
 * Extract transcript from YouTube video
 */
export async function extractTranscript(videoUrl: string): Promise<TranscriptResult> {
  try {
    // Extract video ID from URL
    const videoId = extractVideoId(videoUrl);
    if (!videoId) {
      return {
        success: false,
        error: 'Invalid YouTube URL format'
      };
    }

    console.log('🎯 Extracting transcript for video ID:', videoId);
    console.log('🔗 Original URL:', videoUrl);
    
    // Fetch transcript using youtube-transcript package
    console.log('📡 Attempting to fetch transcript from YouTube...');
    const transcript = await YoutubeTranscript.fetchTranscript(videoId);
    
    if (!transcript || transcript.length === 0) {
      return {
        success: false,
        error: 'No transcript available for this video'
      };
    }

    // Convert to our TranscriptItem format and generate full text
    const transcriptItems: TranscriptItem[] = transcript.map(item => ({
      text: item.text,
      duration: item.duration || 0,
      offset: item.offset || 0,
    }));

    const fullText = transcript.map(item => item.text).join(' ');
    const wordCount = fullText.split(/\s+/).length;
    
    // Calculate total duration from transcript
    const totalDuration = transcript.reduce((sum, item) => 
      sum + (item.duration || 0), 0
    );

    console.log(`✅ Transcript extracted: ${transcript.length} segments, ${wordCount} words, ${Math.round(totalDuration)}s duration`);

    return {
      success: true,
      transcript: transcriptItems,
      fullText,
      metadata: {
        videoId,
        hasAutoGeneratedCaptions: true, // Most videos have auto-generated captions
        language: 'en', // Default, could be detected
        duration: totalDuration,
        wordCount
      }
    };

  } catch (error: any) {
    console.error('❌ Transcript extraction failed:', error.message);
    console.error('🔍 Error details:', error);
    
    // Provide specific error messages based on common failure scenarios
    let errorMessage = 'Failed to extract transcript';
    
    if (error.message.includes('Could not retrieve transcript')) {
      errorMessage = 'No transcript available (captions may be disabled or video is private)';
      console.log('💡 Suggestion: Check if video has public captions enabled');
    } else if (error.message.includes('Video unavailable')) {
      errorMessage = 'Video is unavailable or private';
      console.log('💡 Suggestion: Ensure video is public and accessible');
    } else if (error.message.includes('Transcript disabled')) {
      errorMessage = 'Transcript/captions are disabled for this video';
      console.log('💡 Suggestion: Creator may have disabled captions');
    } else if (error.message.includes('No transcripts were found')) {
      errorMessage = 'No captions/subtitles found for this video';
      console.log('💡 Suggestion: Video may not have auto-generated or manual captions');
    } else {
      console.log('💡 Raw error:', error.message);
    }

    return {
      success: false,
      error: errorMessage
    };
  }
}

/**
 * Format transcript with timestamps for better readability
 */
export function formatTranscriptWithTimestamps(transcript: TranscriptItem[]): string {
  return transcript
    .map(item => {
      const minutes = Math.floor(item.offset / 60);
      const seconds = Math.floor(item.offset % 60);
      const timestamp = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      return `[${timestamp}] ${item.text}`;
    })
    .join('\n');
}

/**
 * Clean and optimize transcript text for Gemini processing
 */
export function cleanTranscriptText(fullText: string): string {
  return fullText
    // Remove excessive whitespace
    .replace(/\s+/g, ' ')
    // Remove common auto-caption artifacts
    .replace(/\[music\]/gi, '[Music]')
    .replace(/\[applause\]/gi, '[Applause]')
    .replace(/\[laughter\]/gi, '[Laughter]')
    // Normalize punctuation
    .replace(/\s+([,.!?])/g, '$1')
    // Trim
    .trim();
}