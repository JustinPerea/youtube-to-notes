/**
 * YouTube Transcript Extraction Utilities
 * 
 * Provides functions to extract transcripts from YouTube videos
 * for efficient text-based processing with Gemini
 */

import { extractTranscriptEnhanced as extractTranscriptEnhancedOfficial, YouTubeTranscriptResult } from '@/lib/services/youtube-api';

export interface TranscriptItem {
  text: string;
  duration: number;
  offset: number;
  lang?: string;
}

export interface TranscriptResult {
  success: boolean;
  transcript?: TranscriptItem[];
  fullText?: string;
  error?: string;
  source?: 'youtube' | 'gemini'; // Track transcript source
  metadata?: {
    videoId: string;
    hasAutoGeneratedCaptions: boolean;
    language: string;
    duration: number;
    wordCount: number;
    transcriptConfidence?: number; // For Gemini-generated transcripts
  };
}

/**
 * Extract YouTube video ID from various URL formats
 */
function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/,
    /youtube\.com\/watch\?.*v=([^&\n?#]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1];
  }
  
  return null;
}

/**
 * Extract transcript from YouTube video (Legacy function - now calls enhanced version)
 */
export async function extractTranscript(videoUrl: string): Promise<TranscriptResult> {
  console.log('üîÑ Legacy extractTranscript() called - redirecting to enhanced version...');
  return await extractTranscriptEnhanced(videoUrl);
}

/**
 * Format transcript with timestamps for better readability
 */
export function formatTranscriptWithTimestamps(transcript: TranscriptItem[]): string {
  return transcript
    .map(item => {
      const minutes = Math.floor(item.offset / 60);
      const seconds = Math.floor(item.offset % 60);
      const timestamp = `${minutes}:${seconds.toString().padStart(2, '0')}`;
      return `[${timestamp}] ${item.text}`;
    })
    .join('\n');
}

/**
 * Enhanced transcript extraction with official YouTube Data API v3 + Gemini fallback
 * This function uses the official YouTube Captions API, then falls back to Gemini generation
 */
export async function extractTranscriptEnhanced(videoUrl: string): Promise<TranscriptResult> {
  console.log('üéØ Starting enhanced transcript extraction with official YouTube Data API v3...');
  
  try {
    // Use the official YouTube Data API v3 + Gemini fallback approach
    const result = await extractTranscriptEnhancedOfficial(videoUrl);
    
    if (result.success && result.transcript) {
      console.log(`‚úÖ Official API transcript successful: ${result.transcript.length} characters from ${result.source}`);
      
      // Convert to our legacy TranscriptResult format for backwards compatibility
      const segments = result.segments || [];
      const transcriptItems: TranscriptItem[] = segments.map(segment => ({
        text: segment.text,
        duration: segment.endTime - segment.startTime,
        offset: segment.startTime,
        lang: result.language || 'en'
      }));
      
      const videoId = extractVideoId(videoUrl);
      const wordCount = result.transcript.split(/\s+/).length;
      const totalDuration = segments.length > 0 
        ? Math.max(...segments.map(s => s.endTime))
        : 0;
      
      return {
        success: true,
        transcript: transcriptItems,
        fullText: result.transcript,
        source: result.source === 'youtube-captions' ? 'youtube' : (result.source === 'gemini' ? 'gemini' : 'youtube'),
        metadata: {
          videoId: videoId || 'unknown',
          hasAutoGeneratedCaptions: result.isAutoGenerated || false,
          language: result.language || 'en',
          duration: totalDuration,
          wordCount,
          transcriptConfidence: result.source === 'youtube-captions' ? 1.0 : 0.9
        }
      };
    }
    
    // If official API fails, return error
    console.error(`‚ùå Official transcript extraction failed: ${result.error}`);
    return {
      success: false,
      error: result.error || 'Official YouTube Data API transcript extraction failed',
      source: 'youtube'
    };
    
  } catch (error) {
    console.error('‚ùå Enhanced transcript extraction error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error during enhanced transcript extraction',
      source: 'youtube'
    };
  }
}

/**
 * Clean and optimize transcript text for Gemini processing
 */
export function cleanTranscriptText(fullText: string): string {
  return fullText
    // Remove excessive whitespace
    .replace(/\s+/g, ' ')
    // Remove common auto-caption artifacts
    .replace(/\[music\]/gi, '[Music]')
    .replace(/\[applause\]/gi, '[Applause]')
    .replace(/\[laughter\]/gi, '[Laughter]')
    // Normalize punctuation
    .replace(/\s+([,.!?])/g, '$1')
    // Trim
    .trim();
}