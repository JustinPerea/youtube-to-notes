'use client';

import React, { useRef } from 'react';
import generatePDF from 'react-to-pdf';

interface PdfDownloadProps {
  content: string;
  title: string;
  template: string;
  className?: string;
}

export default function PdfDownload({ content, title, template, className = '' }: PdfDownloadProps) {
  const contentRef = useRef<HTMLDivElement>(null);

  const handleDownload = async () => {
    if (!contentRef.current) return;

    try {
      const options = {
        filename: `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${template}_notes.pdf`,
      };

      await generatePDF(contentRef, options);
    } catch (error) {
      console.error('PDF generation failed:', error);
      alert('Failed to generate PDF. Please try again.');
    }
  };

  return (
    <div className={className}>
      {/* Hidden content div for PDF generation */}
      <div 
        ref={contentRef} 
        className="hidden"
        style={{
          padding: '20px',
          fontFamily: 'Arial, sans-serif',
          fontSize: '12px',
          lineHeight: '1.5',
          maxWidth: '800px',
          margin: '0 auto',
          backgroundColor: 'white',
          color: 'black'
        }}
      >
        <div style={{ textAlign: 'center', marginBottom: '20px' }}>
          <h1 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '10px' }}>
            {title}
          </h1>
          <p style={{ fontSize: '14px', color: '#666', marginBottom: '20px' }}>
            Generated with {template} template
          </p>
          <hr style={{ border: '1px solid #ddd', marginBottom: '20px' }} />
        </div>
        
        <div 
          dangerouslySetInnerHTML={{ 
            __html: content
              .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
              .replace(/\*(.*?)\*/g, '<em>$1</em>')
              .replace(/\n/g, '<br>')
              .replace(/^### (.*$)/gim, '<h3 style="font-size: 16px; font-weight: bold; margin-top: 15px; margin-bottom: 10px;">$1</h3>')
              .replace(/^## (.*$)/gim, '<h2 style="font-size: 18px; font-weight: bold; margin-top: 20px; margin-bottom: 15px;">$1</h2>')
              .replace(/^# (.*$)/gim, '<h1 style="font-size: 20px; font-weight: bold; margin-top: 25px; margin-bottom: 20px;">$1</h1>')
              .replace(/^- (.*$)/gim, '<li style="margin-left: 20px; margin-bottom: 5px;">$1</li>')
          }} 
        />
        
        <div style={{ marginTop: '30px', paddingTop: '20px', borderTop: '1px solid #ddd', textAlign: 'center', fontSize: '10px', color: '#999' }}>
          <p>Generated by Kyoto Scribe üêï</p>
          <p>{new Date().toLocaleDateString()}</p>
        </div>
      </div>

      {/* Download button */}
      <button
        onClick={handleDownload}
        className="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        disabled={!content}
      >
        <svg 
          className="w-4 h-4 mr-2" 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" 
          />
        </svg>
        Download PDF
      </button>
    </div>
  );
}
